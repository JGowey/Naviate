{"OptionGuid":"141463ff-a33d-4013-9b02-9aa8a8ec9baf","OldOptionGuid":"8b08b74c-bf03-4bea-a709-ba76e47f93de","OldOptionGuids":["8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de","8b08b74c-bf03-4bea-a709-ba76e47f93de"],"OptionsName":"DataFlowOptions","OptionsDescription":"Data Flow Settings","LoadingResult":0,"SavingResult":0,"DataFlowConditionModelList":[{"ExecutionIndex":3,"ExecutionType":0,"IsActive":true,"Name":"ITM Weight","Description":"ITM Weight, If ITM Fishmouth calculate total weight in pounds, If not ITM, return the CP_Weight, If not return 0","FilterName":"All the stuff in view","NaviateFilter":{"Name":"All the stuff in view","SelectionMode":1,"SelectElementsInView":true,"SelectAllElements":false,"SelectFamilyInstances":false,"SelectModelElements":false,"SelectBy3DZone":false,"UsePreselect":false,"UseOnlyCommonParameters":false,"UseLimitByParameter":false,"LimitParameter":{"BuiltInName":"ELEM_FAMILY_AND_TYPE_PARAM","StorageType":"","IsBuiltIn":true,"IsBool":false,"BoolValue":false,"Name":"","Filter":"","Selected":false,"IsChecked":false,"IdInt":"-1"},"LimitParametersToInstance":true,"LimitParametersToType":false,"Nodes":[{"Text":"Categories","FormattedQuantity":"(0)","RootQuantity":"2","ElementIds":[],"Checked":false,"IsSelected":false,"IsRoot":false,"Nodes":[{"Text":"Conduit Fittings","FormattedQuantity":"(0)","RootQuantity":"1","ElementIds":[],"Checked":true,"IsSelected":false,"IsRoot":false,"Nodes":[{"Text":"L-Angle","FormattedQuantity":"(0)","RootQuantity":"1","ElementIds":[],"Checked":true,"IsSelected":false,"IsRoot":false,"Nodes":[{"Text":"L3-1/2X3-1/2X5/16","FormattedQuantity":"(1)","RootQuantity":"0","ElementIds":["1558476"],"Checked":true,"IsSelected":false,"IsRoot":false,"Nodes":[]}]}]},{"Text":"MEP Fabrication Pipework","FormattedQuantity":"(0)","RootQuantity":"1","ElementIds":[],"Checked":true,"IsSelected":false,"IsRoot":false,"Nodes":[{"Text":"Default","FormattedQuantity":"(1)","RootQuantity":"0","ElementIds":["1568325"],"Checked":true,"IsSelected":false,"IsRoot":false,"Nodes":[]}]}]}],"ParamGuidsByParamNameAndValue":{},"SelectedParameters":[],"InvertedSelection":false,"Zone3DName":"Scope Box 1","SettingWithAOB":true},"NaviateFilterValid":true,"TargetParameterValid":true,"PowershellScriptValid":true,"NaviateFilterIdTag":{"Name":"All the stuff in view"},"TargetParameter":{"BuiltInName":"INVALID","StorageType":"","IsBuiltIn":true,"IsBool":false,"BoolValue":false,"Name":"CP_Weight","Filter":"","Selected":false,"IsChecked":false,"IdInt":"1223851","Guid":"559c3b54-3620-42df-95d8-8a95bf58dc3f"},"PowershellScriptContent":"<#\r\n    Script: ITM Weight Calculator (lbs)\r\n    Purpose:\r\n        Calculates dry weight of MEP Fabrication ITMs and RFAs in pounds (lbs).\r\n        - If ITM is a fishmouth: gets branch size and pipe schedule (STD, SCH40, SCH10) and looks up lbs/ft.\r\n        - If not a fishmouth: uses \"Weight\" parameter in kg and converts to lbs.\r\n        - If RFA: reads \"CP_Weight\" parameter from instance or type.\r\n        -If Null Retutn 0\r\n        Always returns a numeric value rounded to 3 decimal places in pounds (lbs).\r\n#>\r\n\r\n# Handle RFAs (non-ITMs)\r\nif ($naviateElement -isnot [Autodesk.Revit.DB.FabricationPart]) {\r\n    $cpWeightParam = $naviateElement.LookupParameter(\"CP_Weight\")\r\n    if (-not $cpWeightParam -or -not $cpWeightParam.HasValue) {\r\n        $typeId = $naviateElement.GetTypeId()\r\n        $typeElement = $naviateElement.Document.GetElement($typeId)\r\n        if ($typeElement) {\r\n            $cpWeightParam = $typeElement.LookupParameter(\"CP_Weight\")\r\n        }\r\n    }\r\n\r\n    if ($cpWeightParam -and $cpWeightParam.HasValue) {\r\n        $rawWeight = $cpWeightParam.AsDouble()\r\n        return [Math]::Round($rawWeight, 3)\r\n    } else {\r\n        return 0\r\n    }\r\n}\r\n\r\n# --- Weight-per-foot tables ---\r\n$pipeWeight_STD = @{\r\n    0.125=0.24; 0.25=0.42; 0.375=0.57; 0.5=0.85; 0.75=1.13; 1.0=1.68; 1.25=2.27; 1.5=2.72;\r\n    2.0=3.66; 2.5=5.80; 3.0=7.58; 3.5=9.12; 4.0=10.79; 5.0=14.62; 6.0=18.97; 8.0=28.55;\r\n    10.0=40.48; 12.0=49.56; 14.0=57.93; 16.0=67.54; 18.0=77.52; 20.0=88.22; 24.0=110.62;\r\n    30.0=138.04; 36.0=169.27; 42.0=201.58; 48.0=233.63\r\n}\r\n$pipeWeight_SCH40 = @{\r\n    0.125=0.24; 0.25=0.41; 0.375=0.54; 0.5=0.85; 0.75=1.13; 1.0=1.68; 1.25=2.27; 1.5=2.72;\r\n    2.0=2.638; 2.5=3.652; 3.0=5.618; 3.5=7.093; 4.0=7.568; 5.0=10.79; 6.0=18.97; 8.0=28.58;\r\n    10.0=40.48; 12.0=49.56; 14.0=62.58; 16.0=75.58; 18.0=89.68; 20.0=105.1; 24.0=138.7;\r\n    30.0=172.0; 36.0=208.4; 42.0=248.3; 48.0=288.5\r\n}\r\n$pipeWeight_SCH10 = @{\r\n    0.125=0.20; 0.25=0.33; 0.375=0.48; 0.5=0.72; 0.75=0.97; 1.0=1.30; 1.25=1.70; 1.5=2.10;\r\n    2.0=2.09; 2.5=2.72; 3.0=3.66; 3.5=4.52; 4.0=5.62; 5.0=7.77; 6.0=9.29; 8.0=13.60;\r\n    10.0=17.81; 12.0=22.32; 14.0=24.00; 16.0=27.17; 18.0=30.30; 20.0=33.84; 24.0=39.69;\r\n    30.0=47.5; 36.0=56.0; 42.0=64.0; 48.0=72.0\r\n}\r\n\r\n# Get pipe schedule\r\n$spec = $naviateElement.ProductSpecificationDescription\r\nif ($spec -match \"SCH ?10\") { $schedule = \"SCH10\" }\r\nelseif ($spec -match \"SCH ?40\") { $schedule = \"SCH40\" }\r\nelseif ($spec -match \"STD\") { $schedule = \"STD\" }\r\nelse { $schedule = \"STD\" }\r\n\r\n# Read Product Entry (e.g., \"4x2\") to detect fishmouth\r\n$productEntry = \"\"\r\n$entryParam = $naviateElement.LookupParameter(\"Product Entry\")\r\nif ($entryParam -and $entryParam.HasValue) {\r\n    $productEntry = $entryParam.AsString()\r\n}\r\n\r\n$isFish = $false\r\n$branchSize = $null\r\nif ($productEntry -match \"([0-9 ]+)(x|X)([0-9 \\/\\.]+)\") {\r\n    function Convert-ToDecimal {\r\n        param([string]$text)\r\n        $text = $text.Trim()\r\n        if ($text -match \"^(\\d+)\\s+(\\d+)/(\\d+)$\") {\r\n            return [double]$matches[1] + ([double]$matches[2] / [double]$matches[3])\r\n        } elseif ($text -match \"^(\\d+)/(\\d+)$\") {\r\n            return [double]$matches[1] / [double]$matches[2]\r\n        } else {\r\n            return [double]$text\r\n        }\r\n    }\r\n    $branchSize = Convert-ToDecimal $matches[3]\r\n    $isFish = $true\r\n}\r\n\r\n# Helper: Closest match in lookup\r\nfunction Get-ClosestKey {\r\n    param($lookup, $target)\r\n    $closest = $null\r\n    $minDiff = [double]::MaxValue\r\n    foreach ($k in $lookup.Keys) {\r\n        $diff = [math]::Abs($k - $target)\r\n        if ($diff -lt $minDiff) {\r\n            $minDiff = $diff\r\n            $closest = $k\r\n        }\r\n    }\r\n    return $closest\r\n}\r\n\r\n# Fishmouth: Use lookup table\r\nif ($isFish -and $branchSize -ne $null) {\r\n    switch ($schedule) {\r\n        \"SCH10\" { $lookup = $pipeWeight_SCH10 }\r\n        \"SCH40\" { $lookup = $pipeWeight_SCH40 }\r\n        default { $lookup = $pipeWeight_STD }\r\n    }\r\n\r\n    $nomSize = Get-ClosestKey $lookup $branchSize\r\n    $weightPerFoot = $lookup[$nomSize]\r\n\r\n    $lengthParam = $naviateElement.LookupParameter(\"Length\")\r\n    $lengthFeet = 0\r\n    if ($lengthParam -and $lengthParam.HasValue) {\r\n        $lengthFeet = $lengthParam.AsDouble()\r\n    }\r\n\r\n    $weight = $weightPerFoot * $lengthFeet\r\n}\r\nelse {\r\n    # Standard ITM: Use \"Weight\" in kg and convert\r\n    $weightParam = $naviateElement.LookupParameter(\"Weight\")\r\n    if ($weightParam -and $weightParam.HasValue) {\r\n        $weight = $weightParam.AsDouble() * 2.20462\r\n    } else {\r\n        $weight = 0\r\n    }\r\n}\r\n\r\n# Round to 3 decimal places\r\nreturn [Math]::Round($weight, 3)\r\n","PowershellScriptModel":{"ScriptContent":"<#\r\n    Script: ITM Weight Calculator (lbs)\r\n    Purpose:\r\n        Calculates dry weight of MEP Fabrication ITMs and RFAs in pounds (lbs).\r\n        - If ITM is a fishmouth: gets branch size and pipe schedule (STD, SCH40, SCH10) and looks up lbs/ft.\r\n        - If not a fishmouth: uses \"Weight\" parameter in kg and converts to lbs.\r\n        - If RFA: reads \"CP_Weight\" parameter from instance or type.\r\n        -If Null Retutn 0\r\n        Always returns a numeric value rounded to 3 decimal places in pounds (lbs).\r\n#>\r\n\r\n# Handle RFAs (non-ITMs)\r\nif ($naviateElement -isnot [Autodesk.Revit.DB.FabricationPart]) {\r\n    $cpWeightParam = $naviateElement.LookupParameter(\"CP_Weight\")\r\n    if (-not $cpWeightParam -or -not $cpWeightParam.HasValue) {\r\n        $typeId = $naviateElement.GetTypeId()\r\n        $typeElement = $naviateElement.Document.GetElement($typeId)\r\n        if ($typeElement) {\r\n            $cpWeightParam = $typeElement.LookupParameter(\"CP_Weight\")\r\n        }\r\n    }\r\n\r\n    if ($cpWeightParam -and $cpWeightParam.HasValue) {\r\n        $rawWeight = $cpWeightParam.AsDouble()\r\n        return [Math]::Round($rawWeight, 3)\r\n    } else {\r\n        return 0\r\n    }\r\n}\r\n\r\n# --- Weight-per-foot tables ---\r\n$pipeWeight_STD = @{\r\n    0.125=0.24; 0.25=0.42; 0.375=0.57; 0.5=0.85; 0.75=1.13; 1.0=1.68; 1.25=2.27; 1.5=2.72;\r\n    2.0=3.66; 2.5=5.80; 3.0=7.58; 3.5=9.12; 4.0=10.79; 5.0=14.62; 6.0=18.97; 8.0=28.55;\r\n    10.0=40.48; 12.0=49.56; 14.0=57.93; 16.0=67.54; 18.0=77.52; 20.0=88.22; 24.0=110.62;\r\n    30.0=138.04; 36.0=169.27; 42.0=201.58; 48.0=233.63\r\n}\r\n$pipeWeight_SCH40 = @{\r\n    0.125=0.24; 0.25=0.41; 0.375=0.54; 0.5=0.85; 0.75=1.13; 1.0=1.68; 1.25=2.27; 1.5=2.72;\r\n    2.0=2.638; 2.5=3.652; 3.0=5.618; 3.5=7.093; 4.0=7.568; 5.0=10.79; 6.0=18.97; 8.0=28.58;\r\n    10.0=40.48; 12.0=49.56; 14.0=62.58; 16.0=75.58; 18.0=89.68; 20.0=105.1; 24.0=138.7;\r\n    30.0=172.0; 36.0=208.4; 42.0=248.3; 48.0=288.5\r\n}\r\n$pipeWeight_SCH10 = @{\r\n    0.125=0.20; 0.25=0.33; 0.375=0.48; 0.5=0.72; 0.75=0.97; 1.0=1.30; 1.25=1.70; 1.5=2.10;\r\n    2.0=2.09; 2.5=2.72; 3.0=3.66; 3.5=4.52; 4.0=5.62; 5.0=7.77; 6.0=9.29; 8.0=13.60;\r\n    10.0=17.81; 12.0=22.32; 14.0=24.00; 16.0=27.17; 18.0=30.30; 20.0=33.84; 24.0=39.69;\r\n    30.0=47.5; 36.0=56.0; 42.0=64.0; 48.0=72.0\r\n}\r\n\r\n# Get pipe schedule\r\n$spec = $naviateElement.ProductSpecificationDescription\r\nif ($spec -match \"SCH ?10\") { $schedule = \"SCH10\" }\r\nelseif ($spec -match \"SCH ?40\") { $schedule = \"SCH40\" }\r\nelseif ($spec -match \"STD\") { $schedule = \"STD\" }\r\nelse { $schedule = \"STD\" }\r\n\r\n# Read Product Entry (e.g., \"4x2\") to detect fishmouth\r\n$productEntry = \"\"\r\n$entryParam = $naviateElement.LookupParameter(\"Product Entry\")\r\nif ($entryParam -and $entryParam.HasValue) {\r\n    $productEntry = $entryParam.AsString()\r\n}\r\n\r\n$isFish = $false\r\n$branchSize = $null\r\nif ($productEntry -match \"([0-9 ]+)(x|X)([0-9 \\/\\.]+)\") {\r\n    function Convert-ToDecimal {\r\n        param([string]$text)\r\n        $text = $text.Trim()\r\n        if ($text -match \"^(\\d+)\\s+(\\d+)/(\\d+)$\") {\r\n            return [double]$matches[1] + ([double]$matches[2] / [double]$matches[3])\r\n        } elseif ($text -match \"^(\\d+)/(\\d+)$\") {\r\n            return [double]$matches[1] / [double]$matches[2]\r\n        } else {\r\n            return [double]$text\r\n        }\r\n    }\r\n    $branchSize = Convert-ToDecimal $matches[3]\r\n    $isFish = $true\r\n}\r\n\r\n# Helper: Closest match in lookup\r\nfunction Get-ClosestKey {\r\n    param($lookup, $target)\r\n    $closest = $null\r\n    $minDiff = [double]::MaxValue\r\n    foreach ($k in $lookup.Keys) {\r\n        $diff = [math]::Abs($k - $target)\r\n        if ($diff -lt $minDiff) {\r\n            $minDiff = $diff\r\n            $closest = $k\r\n        }\r\n    }\r\n    return $closest\r\n}\r\n\r\n# Fishmouth: Use lookup table\r\nif ($isFish -and $branchSize -ne $null) {\r\n    switch ($schedule) {\r\n        \"SCH10\" { $lookup = $pipeWeight_SCH10 }\r\n        \"SCH40\" { $lookup = $pipeWeight_SCH40 }\r\n        default { $lookup = $pipeWeight_STD }\r\n    }\r\n\r\n    $nomSize = Get-ClosestKey $lookup $branchSize\r\n    $weightPerFoot = $lookup[$nomSize]\r\n\r\n    $lengthParam = $naviateElement.LookupParameter(\"Length\")\r\n    $lengthFeet = 0\r\n    if ($lengthParam -and $lengthParam.HasValue) {\r\n        $lengthFeet = $lengthParam.AsDouble()\r\n    }\r\n\r\n    $weight = $weightPerFoot * $lengthFeet\r\n}\r\nelse {\r\n    # Standard ITM: Use \"Weight\" in kg and convert\r\n    $weightParam = $naviateElement.LookupParameter(\"Weight\")\r\n    if ($weightParam -and $weightParam.HasValue) {\r\n        $weight = $weightParam.AsDouble() * 2.20462\r\n    } else {\r\n        $weight = 0\r\n    }\r\n}\r\n\r\n# Round to 3 decimal places\r\nreturn [Math]::Round($weight, 3)\r\n","FilePath":"","IsEditing":false,"HashCodeGuid":"d9771d07-3efb-4bfd-88ef-e3b59aee9fc5","Name":"ITM Weight and RFA to 0","Filter":"","Selected":false,"IsChecked":false,"IdInt":"-1"},"IsValidRule":true,"Status":0,"Group":{"IsEditing":false,"Name":"BOM Reporting","PreviousName":""},"GroupName":"BOM Reporting","HashCodeGuid":"c1b2c561-df91-4f51-841a-cacd6f8aa343","Filter":"","Selected":true,"IsChecked":true,"IdInt":"-1"}]}
